import java.util.ArrayList;

// Per PROP, només necessitem multigraf no dirigit ponderat
// http://www.docjar.com/docs/api/org/jboss/util/graph/Graph.html
public class Vertex<T> {
	protected T data;
	protected boolean visited;//public??
	private List<E extends Edge<V>> incomingEdges;
	private List<E extends Edge<V>> outgoingEdges;
	
	public Vertex<T>(T data);
	public Vertex<T>(T data, boolean visited);
	public T getData();
	public T setData();
	public addEdge(E extends Edge<V>);
	public boolean hasEdge(Edge<T> e);
	public boolean remove(Edge<T> e); 
	public int getDegree();
	public int getIndegree();
	public int getIndegree();
	public void visit();
	public void unvisit();

public class Edge<V extends Vertex<T>> {
	protected V from;
	protected V to;
	protected double weight;
	private boolean visited;
	private boolean directed;
	private static defaultWeight;
	
}

public class graph<V extends Vertex<T>, E extends Edge<T>> {
	
	
	public boolean isEmpty();
	public boolean addVertex(Vertex<T> v);
	//public boolean addVertex(T);	no perque un vertex no es pot identificar per data. Un vertex té identitat propia i pertany a un conjunt, pertant no es pot repetir
	public int size();
	public ArrayList<Vertex<T>> getVertices();
    public boolean addEdge(Vertex<T> from, Vertex<T> to, int cost) throws IllegalArgumentException;
	public List<Edge<T>> getEdges();
	public boolean removeVertex(Vertex<T> v);
	public boolean removeEdge(Vertex<T> from, Vertex<T> to) // remove an arbitrary edge between the 2 vertices
	public void unvisitEdges();
	public void unvisitVertices()
}
